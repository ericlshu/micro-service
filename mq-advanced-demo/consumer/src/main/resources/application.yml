logging:
  pattern:
    dateformat: HH:mm:ss:SSS
  level:
    cn.itcast: debug
spring:
  rabbitmq:
    host: 110.40.224.64 # rabbitMQ的ip地址
    # 指定MQ集群地址
    # addresses: 192.168.150.105:8071, 192.168.150.105:8072, 192.168.150.105:8073
    port: 5672          # 端口
    username: eric
    password: 1234
    virtual-host: /
    listener:
      simple:
        prefetch: 1
        # RabbitMQ支持消费者确认机制，即：消费者处理消息后可以向MQ发送ack回执，MQ收到ack回执后才会删除该消息
        #   manual：手动ack，需要在业务代码结束后，调用api发送ack。
        #   auto：自动ack，由spring监测listener代码是否出现异常，没有异常则返回ack；抛出异常则返回nack
        #   none：关闭ack，MQ假定消费者获取消息后会成功处理，因此消息投递后立即被删除
        # acknowledge-mode: auto

        # 当消费者出现异常后，消息会不断requeue（重新入队）到队列，再重新发送给消费者，然后再次异常，再次requeue，无限循环，导致mq的消息处理飙升，带来不必要的压力：
        # 我们可以利用Spring的retry机制，在消费者出现异常时利用本地重试，而不是无限制的requeue到mq队列。
        retry:
          enabled: true           # 开启消费者失败重试
          initial-interval: 1000  # 初始的失败等待时长为1秒
          multiplier: 2           # 下次失败的等待时长倍数，下次等待时长 = multiplier * last-interval
          max-attempts: 4         # 最大重试次数
          stateless: true         # true无状态；false有状态。如果业务中包含事务，这里改为false
